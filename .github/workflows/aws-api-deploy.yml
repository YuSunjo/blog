#name: Deploy to Amazon ECS
#
#on:
#  push:
#    branches:
#      - develop
#
#jobs:
#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    environment: production
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Create aws-key.yml file
#        env:
#          CLOUD_AWS_CREDENTIALS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
#          CLOUD_AWS_CREDENTIALS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
#          RESOURCE_FILE: blog-admin/src/main/resources/aws-key.yml
#        run: |
#          touch $RESOURCE_FILE
#          echo "cloud.aws.credentials.access_key: $CLOUD_AWS_CREDENTIALS_ACCESS_KEY \
#                cloud.aws.credentials.secret_key: $CLOUD_AWS_CREDENTIALS_SECRET_KEY" >> $RESOURCE_FILE
#
#      - name: Create aws-key.yml file
#        env:
#          CLOUD_AWS_CREDENTIALS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
#          CLOUD_AWS_CREDENTIALS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
#          RESOURCE_FILE: blog-api/src/main/resources/aws-key.yml
#        run: |
#          touch $RESOURCE_FILE
#          echo "cloud.aws.credentials.access_key: $CLOUD_AWS_CREDENTIALS_ACCESS_KEY \
#                cloud.aws.credentials.secret_key: $CLOUD_AWS_CREDENTIALS_SECRET_KEY" >> $RESOURCE_FILE
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: blog-api
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          # Build a docker container and
#          # push it to ECR so that it can
#          # be deployed to ECS.
#          docker build -f Dockerfile_api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
#
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition-api.json
#          container-name: blog-api-container
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: blog-api-ecs-service
#          cluster: blog-api-cluster
#          wait-for-service-stability: true

name: Deploy blog-api

on:
  push:
    branches:
      - deploy

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17